
7.   Kruskals   FileName:KruskalsAlgorithm   output: must be less than city-1

package prac;

import java.util.*;

// Class to represent an edge in the graph
class Edge implements Comparable<Edge> {
    int source, destination, weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    // Sort edges by weight
    @Override
    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

// Class to represent a subset for union-find
class Subset {
    int parent, rank;
}

public class KruskalsAlgorithm {

    // Find the parent of a node with path compression
    private static int find(Subset[] subsets, int node) {
        if (subsets[node].parent != node) {
            subsets[node].parent = find(subsets, subsets[node].parent);
        }
        return subsets[node].parent;
    }

    // Union of two subsets
    private static void union(Subset[] subsets, int root1, int root2) {
        if (subsets[root1].rank < subsets[root2].rank) {
            subsets[root1].parent = root2;
        } else if (subsets[root1].rank > subsets[root2].rank) {
            subsets[root2].parent = root1;
        } else {
            subsets[root2].parent = root1;
            subsets[root1].rank++;
        }
    }

    // Kruskal's algorithm to construct MST
    public static void kruskalMST(int vertices, List<Edge> edges) {
        Collections.sort(edges); // Sort edges by weight

        // Allocate memory for subsets
        Subset[] subsets = new Subset[vertices];
        for (int i = 0; i < vertices; i++) {
            subsets[i] = new Subset();
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        List<Edge> mst = new ArrayList<>();
        int mstCost = 0;

        for (Edge edge : edges) {
            int root1 = find(subsets, edge.source);
            int root2 = find(subsets, edge.destination);

            // If including this edge does not form a cycle
            if (root1 != root2) {
                mst.add(edge); // Add edge to MST
                mstCost += edge.weight;
                union(subsets, root1, root2); // Union of the two subsets
            }
        }

        // Print MST and total cost
        System.out.println("Edges in the Minimum Spanning Tree:");
        for (Edge edge : mst) {
            System.out.println(edge.source + " - " + edge.destination + " : " + edge.weight);
        }
        System.out.println("Total cost of MST: " + mstCost);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of cities (vertices):");
        int vertices = scanner.nextInt();

        System.out.println("Enter the number of roads (edges):");
        int edgesCount = scanner.nextInt();

        List<Edge> edges = new ArrayList<>();

        System.out.println("Enter the roads (source, destination, weight):");
        for (int i = 0; i < edgesCount; i++) {
            int source = scanner.nextInt();
            int destination = scanner.nextInt();
            int weight = scanner.nextInt();

            // Validate source and destination indices
            if (source < 0 || source >= vertices || destination < 0 || destination >= vertices) {
                System.out.println("Invalid edge: source and destination must be between 0 and " + (vertices - 1));
                i--; // Repeat this iteration to get a valid edge
                continue;
            }

            edges.add(new Edge(source, destination, weight));
        }

        kruskalMST(vertices, edges);

        scanner.close();
    }
}

SAMPLE INPUT
Enter the number of cities (vertices):
4
Enter the number of roads (edges):
5
Enter the roads (source, destination, weight):
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4

