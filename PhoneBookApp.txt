4.  insert contact,delete,update     file name: PhoneBookApp

package prac;

import java.util.InputMismatchException;
import java.util.Scanner;

class Contact {
    String name;
    String phoneNumber;

    // Constructor to initialize a contact
    public Contact(String name, String phoneNumber) {
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Phone Number: " + phoneNumber;
    }
}

class TreeNode {
    Contact contact;
    TreeNode left, right;

    public TreeNode(Contact contact) {
        this.contact = contact;
        this.left = this.right = null;
    }
}

class PhoneBook {
    private TreeNode root;

    public PhoneBook() {
        root = null;
    }

    // Insert a new contact into the tree
    public void insert(Contact contact) {
        root = insertRec(root, contact);
    }

    private TreeNode insertRec(TreeNode root, Contact contact) {
        if (root == null) {
            return new TreeNode(contact);
        }

        // Compare names for BST property
        if (contact.name.compareTo(root.contact.name) < 0) {
            root.left = insertRec(root.left, contact);
        } else if (contact.name.compareTo(root.contact.name) > 0) {
            root.right = insertRec(root.right, contact);
        }

        return root;
    }

    // Search for a contact by name
    public Contact search(String name) {
        return searchRec(root, name);
    }

    private Contact searchRec(TreeNode root, String name) {
        if (root == null) {
            return null;
        }

        if (name.equals(root.contact.name)) {
            return root.contact;
        }

        if (name.compareTo(root.contact.name) < 0) {
            return searchRec(root.left, name);
        } else {
            return searchRec(root.right, name);
        }
    }

    // Update the phone number of a contact
    public boolean update(String name, String newPhoneNumber) {
        Contact contact = search(name);
        if (contact != null) {
            contact.phoneNumber = newPhoneNumber;
            return true;
        }
        return false;
    }

    // Delete a contact from the tree
    public boolean delete(String name) {
        if (search(name) == null) {
            return false;
        }
        root = deleteRec(root, name);
        return true;
    }

    private TreeNode deleteRec(TreeNode root, String name) {
        if (root == null) {
            return null;
        }

        if (name.compareTo(root.contact.name) < 0) {
            root.left = deleteRec(root.left, name);
        } else if (name.compareTo(root.contact.name) > 0) {
            root.right = deleteRec(root.right, name);
        } else {
            // Node with one or no child
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            // Node with two children: Get inorder successor
            root.contact = minValue(root.right);
            root.right = deleteRec(root.right, root.contact.name);
        }

        return root;
    }

    // Get the contact with the minimum value (used for deletion)
    private Contact minValue(TreeNode root) {
        Contact minValue = root.contact;
        while (root.left != null) {
            root = root.left;
            minValue = root.contact;
        }
        return minValue;
    }

    // Print the contacts in order
    public void printInOrder() {
        printInOrderRec(root);
    }

    private void printInOrderRec(TreeNode root) {
        if (root != null) {
            printInOrderRec(root.left);
            System.out.println(root.contact);
            printInOrderRec(root.right);
        }
    }
}

public class PhoneBookApp {
    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            PhoneBook phoneBook = new PhoneBook();

            while (true) {
                System.out.println("\nPhone Book Application:");
                System.out.println("1. Add Contact");
                System.out.println("2. Search Contact");
                System.out.println("3. Update Contact");
                System.out.println("4. Delete Contact");
                System.out.println("5. Display All Contacts");
                System.out.println("6. Exit");
                System.out.print("Enter your choice: ");

                try {
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline character

                    switch (choice) {
                        case 1:
                            System.out.print("Enter name: ");
                            String name = scanner.nextLine();
                            System.out.print("Enter phone number: ");
                            String phoneNumber = scanner.nextLine();
                            phoneBook.insert(new Contact(name, phoneNumber));
                            System.out.println("Contact added.\n");
                            break;

                        case 2:
                            System.out.print("Enter name to search: ");
                            name = scanner.nextLine();
                            Contact contact = phoneBook.search(name);
                            if (contact != null) {
                                System.out.println("Found: " + contact + "\n");
                            } else {
                                System.out.println("Contact not found.\n");
                            }
                            break;

                        case 3:
                            System.out.print("Enter name to update: ");
                            name = scanner.nextLine();
                            System.out.print("Enter new phone number: ");
                            phoneNumber = scanner.nextLine();
                            boolean updated = phoneBook.update(name, phoneNumber);
                            if (updated) {
                                System.out.println("Contact updated.\n");
                            } else {
                                System.out.println("Contact not found.\n");
                            }
                            break;

                        case 4:
                            System.out.print("Enter name to delete: ");
                            name = scanner.nextLine();
                            boolean deleted = phoneBook.delete(name);
                            if (deleted) {
                                System.out.println("Contact deleted.\n");
                            } else {
                                System.out.println("Contact not found.\n");
                            }
                            break;

                        case 5:
                            System.out.println("All Contacts:");
                            phoneBook.printInOrder();
                            System.out.println();
                            break;

                        case 6:
                            System.out.println("Exiting...");
                            return;

                        default:
                            System.out.println("Invalid choice. Please try again.\n");
                    }
                } catch (InputMismatchException e) {
                    System.out.println("Invalid input. Please enter a number between 1 and 6.\n");
                    scanner.nextLine(); // Clear the invalid input
                }
            }
        }
    }
}

