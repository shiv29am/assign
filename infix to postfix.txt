2. Conversation    filename: Main.java

package prac;
import java.util.Stack;
import java.util.Scanner;

public class Main {
    
    // Function to return precedence of operators
    public static int precedence(char operator) {
        if (operator == '+' || operator == '-') {
            return 1;
        } else if (operator == '*' || operator == '/') {
            return 2;
        } else {
            return 0;
        }
    }

    // Function to convert infix expression to postfix
    public static String infixToPostfix(String expression) {
        Stack<Character> stack = new Stack<>();
        StringBuilder postfix = new StringBuilder();
        
        for (int i = 0; i < expression.length(); i++) {
            char currentChar = expression.charAt(i);
            
            // Skip spaces
            if (currentChar == ' ') {
                continue;
            }
            
            // If current character is operand, add it to the postfix expression
            if (Character.isLetterOrDigit(currentChar)) {
                postfix.append(currentChar);
            } 
            // If current character is '(', push it to the stack
            else if (currentChar == '(') {
                stack.push(currentChar);
            }
            // If current character is ')', pop from stack until '(' is encountered
            else if (currentChar == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();  // Remove '(' from stack
            }
            // If the current character is an operator
            else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(currentChar)) {
                    postfix.append(stack.pop());
                }
                stack.push(currentChar);
            }
        }
        
        // Pop any remaining operators from the stack
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }
        
        return postfix.toString();
    }

    public static void main(String[] args) {
        // Create a scanner object to take input from the user
        Scanner scanner = new Scanner(System.in);
        
        // Prompt the user to enter an infix expression
        System.out.print("Enter an infix expression: ");
        String infixExpression = scanner.nextLine();
        
        // Validate input (only allow valid characters)
        if (!infixExpression.matches("[a-zA-Z0-9+\\-*/^() ]+")) {
            System.out.println("Invalid characters in expression. Please use only letters, digits, and operators (+, -, *, /, ^, parentheses).");
            return;
        }
        
        // Convert the infix expression to postfix
        String postfixExpression = infixToPostfix(infixExpression);
        
        // Display the result
        System.out.println("Postfix Expression: " + postfixExpression);
        
        // Close the scanner
        scanner.close();
    }
}

