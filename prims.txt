6. Prims filename: PrimMST     output: give space while giving input

package prac;

import java.util.*;

public class PrimMST {

    // Class to represent an edge with node and weight
    static class Edge implements Comparable<Edge> {
        int node;
        int weight;

        Edge(int node, int weight) {
            this.node = node;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge other) {
            return this.weight - other.weight; // Compare edges by weight
        }
    }

    // Method to implement Prim's MST algorithm
    public static void primMST(int[][] graph, int V) {
        boolean[] inMST = new boolean[V]; // Track nodes in MST
        PriorityQueue<Edge> pq = new PriorityQueue<>(); // Priority queue for selecting min weight edge
        pq.add(new Edge(0, 0)); // Start from node 0

        int totalCost = 0; // Total MST cost
        List<String> mstEdges = new ArrayList<>(); // List to track MST edges

        while (!pq.isEmpty()) {
            Edge current = pq.poll();
            int u = current.node;
            int weight = current.weight;

            if (inMST[u]) continue; // Skip if node is already in MST

            inMST[u] = true;
            totalCost += weight;

            if (weight != 0) { // Ignore the initial 0-weight edge
                mstEdges.add(u + " (Weight: " + weight + ")");
            }

            // Add adjacent edges to priority queue
            for (int v = 0; v < V; v++) {
                if (!inMST[v] && graph[u][v] != 0) {
                    pq.add(new Edge(v, graph[u][v]));
                }
            }
        }

        // Print MST edges and total cost
        System.out.println("Edges in the Minimum Spanning Tree:");
        for (String edge : mstEdges) {
            System.out.println(edge);
        }

        System.out.println("Total Cost of Construction: " + totalCost);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input for number of vertices
        System.out.println("Enter the number of cities (vertices): ");
        int V = sc.nextInt();

        int[][] graph = new int[V][V]; // Initialize adjacency matrix

        // Input adjacency matrix
        System.out.println("Enter the adjacency matrix (enter 0 for no edge): ");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = sc.nextInt();
            }
        }

        // Call Prim's algorithm
        primMST(graph, V);

        sc.close();
    }
}

SAMPLE INPUT;
Enter the number of cities (vertices): 
5
Enter the adjacency matrix (enter 0 for no edge): 
0 2 0 6 0 
2 0 3 8 5 
0 3 0 0 7 
6 8 0 0 9 
0 5 7 9 0

